//
//  RESong.h
//  soul-sifter
//
//  Created by Robby Neale
//  Generated by generate_model.rb
//

#ifndef __soul_sifter__RESong__
#define __soul_sifter__RESong__

#include <set>
#include <string>
#include <vector>

#include "ResultSetIterator.h"

namespace sql {
    class ResultSet;
}

using namespace std;

namespace dogatech {
namespace soulsifter {


    class RESong {
    public:
        RESong();
        explicit RESong(const RESong& reSong);
        void operator=(const RESong& reSong);
        ~RESong();
        void clear();

        static RESong* findById(int id);
        static RESong* findBySongid(const string& songid);
        static ResultSetIterator<RESong>* findAll();

        int update();
        int save();
        // sync with db & return true if object needs saving or updating
        bool sync();

        friend class RapidEvolutionDatabaseSongsSongHandler;

        static const int maxREId();
        void setStylesBitmaskFromDb();

        const int getId() const;
        void setId(int id);
        const string& getSongidWinfo() const;
        void setSongidWinfo(const string& songidWinfo);
        const string& getSongid() const;
        void setSongid(const string& songid);
        const string& getShortid() const;
        void setShortid(const string& shortid);
        const string& getShortidWinfo() const;
        void setShortidWinfo(const string& shortidWinfo);
        const string& getArtist() const;
        void setArtist(const string& artist);
        const string& getAlbum() const;
        void setAlbum(const string& album);
        const string& getTrack() const;
        void setTrack(const string& track);
        const string& getTitle() const;
        void setTitle(const string& title);
        const string& getTime() const;
        void setTime(const string& time);
        const string& getTimeSignature() const;
        void setTimeSignature(const string& timeSignature);
        const string& getFilename() const;
        void setFilename(const string& filename);
        const string& getDigitalOnly() const;
        void setDigitalOnly(const string& digitalOnly);
        const string& getCompilation() const;
        void setCompilation(const string& compilation);
        const string& getKeyStart() const;
        void setKeyStart(const string& keyStart);
        const int getKeyAccuracy() const;
        void setKeyAccuracy(int keyAccuracy);
        const string& getBpmStart() const;
        void setBpmStart(const string& bpmStart);
        const int getBpmAccuracy() const;
        void setBpmAccuracy(int bpmAccuracy);
        const int getRating() const;
        void setRating(int rating);
        const string& getDateAdded() const;
        void setDateAdded(const string& dateAdded);
        const string& getCatalogId() const;
        void setCatalogId(const string& catalogId);
        const string& getLabel() const;
        void setLabel(const string& label);
        const string& getRemix() const;
        void setRemix(const string& remix);
        const int getNumPlays() const;
        void setNumPlays(int numPlays);
        const string& getComments() const;
        void setComments(const string& comments);
        const string& getReleaseDate() const;
        void setReleaseDate(const string& releaseDate);
        const string& getFeaturing() const;
        void setFeaturing(const string& featuring);
        const string& getKeyEnd() const;
        void setKeyEnd(const string& keyEnd);
        const string& getDisabled() const;
        void setDisabled(const string& disabled);
        const string& getBpmEnd() const;
        void setBpmEnd(const string& bpmEnd);
        const int getBeatIntensity() const;
        void setBeatIntensity(int beatIntensity);
        const string& getReplayGain() const;
        void setReplayGain(const string& replayGain);
        const string& getStylesBitmask() const;
        void setStylesBitmask(const string& stylesBitmask);

        friend ResultSetIterator<RESong>;
        friend class SearchUtil;

    private:
        int id;
        string songidWinfo;
        string songid;
        string shortid;
        string shortidWinfo;
        string artist;
        string album;
        string track;
        string title;
        string time;
        string timeSignature;
        string filename;
        string digitalOnly;
        string compilation;
        string keyStart;
        int keyAccuracy;
        string bpmStart;
        int bpmAccuracy;
        int rating;
        string dateAdded;
        string catalogId;
        string label;
        string remix;
        int numPlays;
        string comments;
        string releaseDate;
        string featuring;
        string keyEnd;
        string disabled;
        string bpmEnd;
        int beatIntensity;
        string replayGain;
        string stylesBitmask;  // transient

        static void populateFields(const sql::ResultSet* rs, RESong* reSong);
    };

}
}

#endif /* defined(__soul_sifter__RESong__) */
