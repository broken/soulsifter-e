//
//  PlaylistEntry.h
//  soul-sifter
//
//  Created by Robby Neale
//  Generated by generate_model.rb
//

#ifndef __soul_sifter__PlaylistEntry__
#define __soul_sifter__PlaylistEntry__

#include <set>
#include <string>
#include <vector>

#include "ResultSetIterator.h"

namespace sql {
    class ResultSet;
}

using namespace std;

namespace dogatech {
namespace soulsifter {

    class Playlist;
    class Song;

    class PlaylistEntry {
    public:
        PlaylistEntry();
        explicit PlaylistEntry(const PlaylistEntry& playlistEntry);
        void operator=(const PlaylistEntry& playlistEntry);
        ~PlaylistEntry();
        void clear();

        static PlaylistEntry* findById(int id);
        static PlaylistEntry* findByPlaylistIdAndSongId(int playlistId, int songId);
        static ResultSetIterator<PlaylistEntry>* findByPlaylistId(int playlistId);
        static ResultSetIterator<PlaylistEntry>* findBySongId(int songId);
        static ResultSetIterator<PlaylistEntry>* findAll();

        int update();
        int save();
        // sync with db & return true if object needs saving or updating
        bool sync();
        int erase();

        const int getId() const;
        void setId(int id);
        const int getPlaylistId() const;
        void setPlaylistId(int playlistId);
        Playlist* getPlaylist();
        Playlist* getPlaylistConst() const;
        void setPlaylist(const Playlist& playlist);
        void setPlaylist(Playlist* playlist);  // takes ownership
        const int getSongId() const;
        void setSongId(int songId);
        Song* getSong();
        Song* getSongConst() const;
        void setSong(const Song& song);
        void setSong(Song* song);  // takes ownership
        const int getPosition() const;
        void setPosition(int position);
        const string& getTime() const;
        void setTime(const string& time);

        friend ResultSetIterator<PlaylistEntry>;
        friend class SearchUtil;

    private:
        int id;
        int playlistId;
        Playlist* playlist;
        int songId;
        Song* song;
        int position;
        string time;

        static void populateFields(const sql::ResultSet* rs, PlaylistEntry* playlistEntry);
    };

}
}

#endif /* defined(__soul_sifter__PlaylistEntry__) */
